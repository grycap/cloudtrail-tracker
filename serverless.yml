service: alucloud00-ctt

provider: 
  name: aws
  iam:
    role: IAM-ROLE-ARN
  stage: dev
  region: us-east-1 
  stackTags:
    owner: alucloud00
  deploymentBucket:
    name: alucloud
  

package: # Optional deployment packaging configuration
    patterns: # Specify the directories and files which should be included in the deployment package
      - dynamodb/Logs.py

resources:
  Resources: 
    eventsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: 'alucloud00-ctt-db'
        AttributeDefinitions:
          - AttributeName: eventID
            AttributeType: S
          - AttributeName: userIdentity_userName
            AttributeType: S
          - AttributeName: eventTime
            AttributeType: S      
        KeySchema:
          - AttributeName: eventID 
            KeyType: 'HASH'
          - AttributeName: userIdentity_userName
            KeyType: 'RANGE'
        ProvisionedThroughput:
              ReadCapacityUnits: '1'
              WriteCapacityUnits: '1'
        GlobalSecondaryIndexes:
          - IndexName: userIdentity_userName-eventTime-index
            KeySchema:
            - AttributeName: userIdentity_userName
              KeyType: HASH
            - AttributeName: eventTime
              KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: '1'
              WriteCapacityUnits: '1'
                 

functions: 
  EventUploads:
    handler: lambda/eventuploads/Upload.handler
    name: alucloud00-ctt-lambda-upload
    description: CloudTrail-Tracker (Upload)
    runtime: python3.9
    memorySize: 128
    timeout: 30
    events:
      - s3: 
          bucket: alucloud00-ctt
          event: s3:ObjectCreated:*
          rules:
            - prefix: AWSLogs/
            - suffix: .gz          


  Query:
    handler: lambda/query/getQuery.handler
    name: alucloud00-ctt-lambda-query
    description: CloudTrail-Tracker (Query)
    runtime: python3.9
    memorySize: 512
    timeout: 30
    events:
      - http:
          path: scan
          method: get
          cors: true
          integration: lambda
          request:
            parameters:
              querystrings:
                count: false
                eventName: false
                from: false
                to: false
                param: false
                value: false
            template:
              application/json: '{ "scan" : "scan",
                                   "count" : "$input.params(''count'')",
                                   "eventName" : "$input.params(''eventName'')",
                                   "from" : "$input.params(''from'')",
                                   "to" : "$input.params(''to'')",
                                   "param" : "$input.params(''param'')",
                                   "value" : "$input.params(''value'')"}'
      - http:
          path: users
          method: get
          cors: true
          integration: lambda
          request:
            template:
              application/json: '{ "list_users" : "list_users" }'

      - http:
          path: users/{user}
          method: get
          cors: true
          integration: lambda
          request:
            parameters:
              querystrings:
                count: false
                eventName: false
                from: false
                to: false
                param: false
                value: false
            template:
              application/json: '{ "user" : "$input.params(''user'')",
                                   "count" : "$input.params(''count'')",
                                   "eventName" : "$input.params(''eventName'')",
                                   "from" : "$input.params(''from'')",
                                   "to" : "$input.params(''to'')",
                                   "param" : "$input.params(''param'')",
                                   "value" : "$input.params(''value'')"}'
      - http:
          path: services
          method: get
          cors: true
          integration: lambda
          request:
            template:
              application/json: '{ "services_list" : "services_list" }'
      - http:
          path: parameters
          method: get
          cors: true
          integration: lambda
          request:
            template:
              application/json: '{ "parameters_list" : "parameters_list" }'
      - http:
          path: services/{service}
          method: get
          cors: true
          integration: lambda
          request:
            parameters:
              querystrings:
                count: false
                eventName: false
                from: false
                to: false
                param: false
                value: false
            template:
              application/json: '{ "service" : "$input.params(''service'')",
                                   "count" : "$input.params(''count'')",
                                   "eventName" : "$input.params(''eventName'')",
                                   "from" : "$input.params(''from'')",
                                   "to" : "$input.params(''to'')",
                                   "param" : "$input.params(''param'')",
                                   "value" : "$input.params(''value'')"}'
